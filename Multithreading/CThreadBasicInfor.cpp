#include "CThreadBasicInfor.h"



CThreadBasicInfor::CThreadBasicInfor()
{

}

CThreadBasicInfor::~CThreadBasicInfor()
{

}


/*
	并发、线程、进程
	1. 并发
	两个或者更多的任务（独立的活动）同时进行：一个程序同时执行多个独立的任务
	以往计算机，单核CPU某一时刻只能执行一个任务
	由于操作系统调度，每秒钟进行多次所谓的 "任务切换" ，这是属于并发的假象
	这种切换是有时间开销的，比如在切换时操作系统需要保存你切换时的各种状态，执行进度信息等，都需要时间

	2. 多线程并发
	线程并不是越多越好，每个线程都需要一个独立的堆栈空间（M），线程之间的切换需要保存很多中间状态
	切换会耗费本该属于程序运行的时间

	总结线程：
	线程使用来执行代码的
	一个进程自动包含一个主线程，主线程随着进程的启动而进行，我们可以通过代码来创建多个线程（非主线程）
	但是创建线程的数量最大不建议超过200-300个

	和进程相比，线程启动速度更快，更轻量级
	系统资源开销更少，执行速度更快，比如共享内存这种通信方式比任何其他的通信方式都要快
	使用起来有一定难度，要小心处理数据的一致性问题

	创建线程
	windows: 
*/


void CThreadBasicInfor::GetThreadBasicInfor()
{
	/*
		获取当前CPU可开启的线程数
	*/
	int iTemp = m_thread.hardware_concurrency();



}
